/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LINKEDLIST_H
#define _MOCK_LINKEDLIST_H

#include "LinkedList.h"
#include "CException.h"

void mock_LinkedList_Init(void);
void mock_LinkedList_Destroy(void);
void mock_LinkedList_Verify(void);




#define List_addTail_Ignore() List_addTail_CMockIgnore()
void List_addTail_CMockIgnore(void);
#define List_addTail_Expect(list, element) List_addTail_CMockExpect(__LINE__, list, element)
void List_addTail_CMockExpect(UNITY_LINE_TYPE cmock_line, LinkedList* list, void* element);
typedef void (* CMOCK_List_addTail_CALLBACK)(LinkedList* list, void* element, int cmock_num_calls);
void List_addTail_StubWithCallback(CMOCK_List_addTail_CALLBACK Callback);
#define List_addTail_ExpectAndThrow(list, element, cmock_to_throw) List_addTail_CMockExpectAndThrow(__LINE__, list, element, cmock_to_throw)
void List_addTail_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, LinkedList* list, void* element, CEXCEPTION_T cmock_to_throw);
#define List_removeHead_IgnoreAndReturn(cmock_retval) List_removeHead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void List_removeHead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define List_removeHead_ExpectAndReturn(list, cmock_retval) List_removeHead_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void List_removeHead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList* list, void* cmock_to_return);
typedef void* (* CMOCK_List_removeHead_CALLBACK)(LinkedList* list, int cmock_num_calls);
void List_removeHead_StubWithCallback(CMOCK_List_removeHead_CALLBACK Callback);
#define List_removeHead_ExpectAndThrow(list, cmock_to_throw) List_removeHead_CMockExpectAndThrow(__LINE__, list, cmock_to_throw)
void List_removeHead_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, LinkedList* list, CEXCEPTION_T cmock_to_throw);

#endif
